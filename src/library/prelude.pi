-- NOTE: Many of these functions could benefit from implicit arguments for
-- improved ergonomics. For example, the identity function could be written as:
--
-- ```
-- id : {a : Type} -> a -> a;
-- id x = x;
-- ```
--
-- This would then allow one to write:
--
-- ```
-- Pikelet> id "hello"
-- "hello" : String
-- ```

-- TODO: move this to another file (requires imports)
||| Primitive definitions
prim = record {
    bool = record {
        eq = extern "bool-eq" : Bool -> Bool -> Bool;
        ge = extern "bool-ge" : Bool -> Bool -> Bool;
        gt = extern "bool-gt" : Bool -> Bool -> Bool;
        le = extern "bool-le" : Bool -> Bool -> Bool;
        lt = extern "bool-lt" : Bool -> Bool -> Bool;
        ne = extern "bool-ne" : Bool -> Bool -> Bool;
    };

    f32 = record {
        add = extern "f32-add" : F32 -> F32 -> F32;
        div = extern "f32-div" : F32 -> F32 -> F32;
        eq = extern "f32-eq" : F32 -> F32 -> Bool;
        ge = extern "f32-ge" : F32 -> F32 -> Bool;
        gt = extern "f32-gt" : F32 -> F32 -> Bool;
        le = extern "f32-le" : F32 -> F32 -> Bool;
        lt = extern "f32-lt" : F32 -> F32 -> Bool;
        mul = extern "f32-mul" : F32 -> F32 -> F32;
        ne = extern "f32-ne" : F32 -> F32 -> Bool;
        sub = extern "f32-sub" : F32 -> F32 -> F32;
        to-string = extern "f32-to-string" : F32 -> String;
    };

    f64 = record {
        add = extern "f64-add" : F64 -> F64 -> F64;
        div = extern "f64-div" : F64 -> F64 -> F64;
        eq = extern "f64-eq" : F64 -> F64 -> Bool;
        ge = extern "f64-ge" : F64 -> F64 -> Bool;
        gt = extern "f64-gt" : F64 -> F64 -> Bool;
        le = extern "f64-le" : F64 -> F64 -> Bool;
        lt = extern "f64-lt" : F64 -> F64 -> Bool;
        mul = extern "f64-mul" : F64 -> F64 -> F64;
        ne = extern "f64-ne" : F64 -> F64 -> Bool;
        sub = extern "f64-sub" : F64 -> F64 -> F64;
        to-string = extern "f64-to-string" : F64 -> String;
    };

    i8 = record {
        add = extern "i8-add" : I8 -> I8 -> I8;
        div = extern "i8-div" : I8 -> I8 -> I8;
        eq = extern "i8-eq" : I8 -> I8 -> Bool;
        ge = extern "i8-ge" : I8 -> I8 -> Bool;
        gt = extern "i8-gt" : I8 -> I8 -> Bool;
        le = extern "i8-le" : I8 -> I8 -> Bool;
        lt = extern "i8-lt" : I8 -> I8 -> Bool;
        mul = extern "i8-mul" : I8 -> I8 -> I8;
        ne = extern "i8-ne" : I8 -> I8 -> Bool;
        sub = extern "i8-sub" : I8 -> I8 -> I8;
        to-string = extern "i8-to-string" : I8 -> String;
    };

    i16 = record {
        add = extern "i16-add" : I16 -> I16 -> I16;
        div = extern "i16-div" : I16 -> I16 -> I16;
        eq = extern "i16-eq" : I16 -> I16 -> Bool;
        ge = extern "i16-ge" : I16 -> I16 -> Bool;
        gt = extern "i16-gt" : I16 -> I16 -> Bool;
        le = extern "i16-le" : I16 -> I16 -> Bool;
        lt = extern "i16-lt" : I16 -> I16 -> Bool;
        mul = extern "i16-mul" : I16 -> I16 -> I16;
        ne = extern "i16-ne" : I16 -> I16 -> Bool;
        sub = extern "i16-sub" : I16 -> I16 -> I16;
        to-string = extern "i16-to-string" : I16 -> String;
    };

    i32 = record {
        add = extern "i32-add" : I32 -> I32 -> I32;
        div = extern "i32-div" : I32 -> I32 -> I32;
        eq = extern "i32-eq" : I32 -> I32 -> Bool;
        ge = extern "i32-ge" : I32 -> I32 -> Bool;
        gt = extern "i32-gt" : I32 -> I32 -> Bool;
        le = extern "i32-le" : I32 -> I32 -> Bool;
        lt = extern "i32-lt" : I32 -> I32 -> Bool;
        mul = extern "i32-mul" : I32 -> I32 -> I32;
        ne = extern "i32-ne" : I32 -> I32 -> Bool;
        sub = extern "i32-sub" : I32 -> I32 -> I32;
        to-string = extern "i32-to-string" : I32 -> String;
    };

    i64 = record {
        add = extern "i64-add" : I64 -> I64 -> I64;
        div = extern "i64-div" : I64 -> I64 -> I64;
        eq = extern "i64-eq" : I64 -> I64 -> Bool;
        ge = extern "i64-ge" : I64 -> I64 -> Bool;
        gt = extern "i64-gt" : I64 -> I64 -> Bool;
        le = extern "i64-le" : I64 -> I64 -> Bool;
        lt = extern "i64-lt" : I64 -> I64 -> Bool;
        mul = extern "i64-mul" : I64 -> I64 -> I64;
        ne = extern "i64-ne" : I64 -> I64 -> Bool;
        sub = extern "i64-sub" : I64 -> I64 -> I64;
        to-string = extern "i64-to-string" : I64 -> String;
    };

    u8 = record {
        add = extern "u8-add" : U8 -> U8 -> U8;
        div = extern "u8-div" : U8 -> U8 -> U8;
        eq = extern "u8-eq" : U8 -> U8 -> Bool;
        ge = extern "u8-ge" : U8 -> U8 -> Bool;
        gt = extern "u8-gt" : U8 -> U8 -> Bool;
        le = extern "u8-le" : U8 -> U8 -> Bool;
        lt = extern "u8-lt" : U8 -> U8 -> Bool;
        mul = extern "u8-mul" : U8 -> U8 -> U8;
        ne = extern "u8-ne" : U8 -> U8 -> Bool;
        sub = extern "u8-sub" : U8 -> U8 -> U8;
        to-string = extern "u8-to-string" : U8 -> String;
    };

    u16 = record {
        add = extern "u16-add" : U16 -> U16 -> U16;
        div = extern "u16-div" : U16 -> U16 -> U16;
        eq = extern "u16-eq" : U16 -> U16 -> Bool;
        ge = extern "u16-ge" : U16 -> U16 -> Bool;
        gt = extern "u16-gt" : U16 -> U16 -> Bool;
        le = extern "u16-le" : U16 -> U16 -> Bool;
        lt = extern "u16-lt" : U16 -> U16 -> Bool;
        mul = extern "u16-mul" : U16 -> U16 -> U16;
        ne = extern "u16-ne" : U16 -> U16 -> Bool;
        sub = extern "u16-sub" : U16 -> U16 -> U16;
        to-string = extern "u16-to-string" : U16 -> String;
    };

    u32 = record {
        add = extern "u32-add" : U32 -> U32 -> U32;
        div = extern "u32-div" : U32 -> U32 -> U32;
        eq = extern "u32-eq" : U32 -> U32 -> Bool;
        ge = extern "u32-ge" : U32 -> U32 -> Bool;
        gt = extern "u32-gt" : U32 -> U32 -> Bool;
        le = extern "u32-le" : U32 -> U32 -> Bool;
        lt = extern "u32-lt" : U32 -> U32 -> Bool;
        mul = extern "u32-mul" : U32 -> U32 -> U32;
        ne = extern "u32-ne" : U32 -> U32 -> Bool;
        sub = extern "u32-sub" : U32 -> U32 -> U32;
        to-string = extern "u32-to-string" : U32 -> String;
    };

    u64 = record {
        add = extern "u64-add" : U64 -> U64 -> U64;
        div = extern "u64-div" : U64 -> U64 -> U64;
        eq = extern "u64-eq" : U64 -> U64 -> Bool;
        ge = extern "u64-ge" : U64 -> U64 -> Bool;
        gt = extern "u64-gt" : U64 -> U64 -> Bool;
        le = extern "u64-le" : U64 -> U64 -> Bool;
        lt = extern "u64-lt" : U64 -> U64 -> Bool;
        mul = extern "u64-mul" : U64 -> U64 -> U64;
        ne = extern "u64-ne" : U64 -> U64 -> Bool;
        sub = extern "u64-sub" : U64 -> U64 -> U64;
        to-string = extern "u64-to-string" : U64 -> String;
    };

    char = record {
        eq = extern "char-eq" : Char -> Char -> Bool;
        ge = extern "char-ge" : Char -> Char -> Bool;
        gt = extern "char-gt" : Char -> Char -> Bool;
        le = extern "char-le" : Char -> Char -> Bool;
        lt = extern "char-lt" : Char -> Char -> Bool;
        ne = extern "char-ne" : Char -> Char -> Bool;
        to-string = extern "char-to-string" : Char -> String;
    };

    string = record {
        eq = extern "string-eq" : String -> String -> Bool;
        ge = extern "string-ge" : String -> String -> Bool;
        gt = extern "string-gt" : String -> String -> Bool;
        le = extern "string-le" : String -> String -> Bool;
        lt = extern "string-lt" : String -> String -> Bool;
        ne = extern "string-ne" : String -> String -> Bool;
        append = extern "string-append" : String -> String -> String;
    };
};

||| The polymorphic identity function
id : (a : Type) -> a -> a;
id a x = x;

||| Creates a function that always returns the same value
const : (a b : Type) -> a -> b -> a;
const a b x y = x;

||| Function composition
compose : (a b c : Type) -> (b -> c) -> (a -> b) -> (a -> c);
compose a b c f g x = f (g x);

||| Flip the order of the first two arguments to a function
flip : (a b c : Type) -> (a -> b -> c) -> (b -> a -> c);
flip a b c f x y = f y x;


||| Logical absurdity
|||
||| This type should have no inhabitants - if it does, it's a bug in our
||| type checker!
void : Type^1;
void = (a : Type) -> a;


||| Logical negation
not : Type -> Type^1;
not a = a -> void;


unit : Type^1;
unit = (a : Type) -> a -> a;

unit-intro : unit;
unit-intro = id;

unit-elim : (a : Type) -> unit -> a -> a;
unit-elim a f x = f a x;


||| Logical conjunction (Church encoded)
|||
||| You could also interpret this as a product type
and : Type -> Type -> Type^1;
and p q = (c : Type) -> (p -> q -> c) -> c;

||| Introduce a logical conjunction between two types
and-intro : (p q : Type) -> p -> q -> and p q;
and-intro p q x y c f = f x y;

and-elim-left : (p q : Type) -> and p q -> p;
and-elim-left p q (pq : and p q) = pq p (const p q);

and-elim-right : (p q : Type) -> and p q -> q;
and-elim-right p q (pq : and p q) = pq q (flip q p q (const q p));


||| Logical disjunction (Church encoded)
|||
||| You could also interpret this as a sum type
or : Type -> Type -> Type^1;
or p q = (c : Type) -> (p -> c) -> (q -> c) -> c;

or-intro-left : (p q : Type) -> p -> or p q;
or-intro-left p q x =
    \(c : Type) (on-p : p -> c) (on-q : q -> c) => on-p x;

or-intro-right : (p q : Type) -> q -> or p q;
or-intro-right p q y =
    \(c : Type) (on-p : p -> c) (on-q : q -> c) => on-q y;


||| Dependent products
Prod : (A : Type) (B : A -> Type) -> Type;
Prod A B = (a : A) -> B a;

||| Dependent sums (subtypes)
Sum : (A : Type) (B : A -> Type) -> Type;
Sum A B = Record {
    val : A;
    proof : B val;
};


||| Module for defining equality between two terms
Eq (a : Type) = Record {
    ||| Compare two terms for equality
    eq : a -> a -> Bool;
};

||| Compare two terms for equality
eq : (a : Type) (EQ : Eq a) -> a -> a -> Bool;
eq _ EQ = EQ.eq;

Eq-String : Eq String = record { eq = prim.string.eq };
Eq-Char : Eq Char = record { eq = prim.char.eq };
Eq-Bool : Eq Bool = record { eq = prim.bool.eq };
Eq-U8 : Eq U8 = record { eq = prim.u8.eq };
Eq-U16 : Eq U16 = record { eq = prim.u16.eq };
Eq-U32 : Eq U32 = record { eq = prim.u32.eq };
Eq-U64 : Eq U64 = record { eq = prim.u64.eq };
Eq-I8 : Eq I8 = record { eq = prim.i8.eq };
Eq-I16 : Eq I16 = record { eq = prim.i16.eq };
Eq-I32 : Eq I32 = record { eq = prim.i32.eq };
Eq-I64 : Eq I64 = record { eq = prim.i64.eq };
Eq-F32 : Eq F32 = record { eq = prim.f32.eq };
Eq-F64 : Eq F64 = record { eq = prim.f64.eq };


||| An associative operation on `a`.
Semigroup (a : Type) = Record {
    ||| The associative operation
    append : a -> a -> a;

    -- TODO: Laws via property testing or proofs?
    -- append-assoc : (x y z : a) -> append x (append y z) = append (append x y) z
};

append : (a : Type) (S : Semigroup a) -> a -> a -> a;
append _ S = S.append;


Semigroup-String : Semigroup String = record { append = prim.string.append };

Semigroup-U8-Add : Semigroup U8 = record { append = prim.u8.add };
Semigroup-U16-Add : Semigroup U16 = record { append = prim.u16.add };
Semigroup-U32-Add : Semigroup U32 = record { append = prim.u32.add };
Semigroup-U64-Add : Semigroup U64 = record { append = prim.u64.add };
Semigroup-I8-Add : Semigroup I8 = record { append = prim.i8.add };
Semigroup-I16-Add : Semigroup I16 = record { append = prim.i16.add };
Semigroup-I32-Add : Semigroup I32 = record { append = prim.i32.add };
Semigroup-I64-Add : Semigroup I64 = record { append = prim.i64.add };
Semigroup-F32-Add : Semigroup F32 = record { append = prim.f32.add };
Semigroup-F64-Add : Semigroup F64 = record { append = prim.f64.add };

Semigroup-U8-Mul : Semigroup U8 = record { append = prim.u8.mul };
Semigroup-U16-Mul : Semigroup U16 = record { append = prim.u16.mul };
Semigroup-U32-Mul : Semigroup U32 = record { append = prim.u32.mul };
Semigroup-U64-Mul : Semigroup U64 = record { append = prim.u64.mul };
Semigroup-I8-Mul : Semigroup I8 = record { append = prim.i8.mul };
Semigroup-I16-Mul : Semigroup I16 = record { append = prim.i16.mul };
Semigroup-I32-Mul : Semigroup I32 = record { append = prim.i32.mul };
Semigroup-I64-Mul : Semigroup I64 = record { append = prim.i64.mul };
Semigroup-F32-Mul : Semigroup F32 = record { append = prim.f32.mul };
Semigroup-F64-Mul : Semigroup F64 = record { append = prim.f64.mul };


||| A semigroup that also has an identity element.
Monoid (a : Type) = Record {
    ||| The semigroup
    semigroup : Semigroup a;
    ||| The identity element of `semigroup.append`
    empty : a;

    -- TODO: Laws via property testing or proofs?
    -- append-empty : (x : a) -> semigroup.append x empty = x
    -- empty-append : (x : a) -> semigroup.append empty x = x
};

empty : (a : Type) (M : Monoid a) -> a;
empty _ M = M.empty;


Monoid-String : Monoid String = record { semigroup = Semigroup-String; empty = "" };

Monoid-U8-Add : Monoid U8 = record { semigroup = Semigroup-U8-Add; empty = 0 };
Monoid-U16-Add : Monoid U16 = record { semigroup = Semigroup-U16-Add; empty = 0 };
Monoid-U32-Add : Monoid U32 = record { semigroup = Semigroup-U32-Add; empty = 0 };
Monoid-U64-Add : Monoid U64 = record { semigroup = Semigroup-U64-Add; empty = 0 };
Monoid-I8-Add : Monoid I8 = record { semigroup = Semigroup-I8-Add; empty = 0 };
Monoid-I16-Add : Monoid I16 = record { semigroup = Semigroup-I16-Add; empty = 0 };
Monoid-I32-Add : Monoid I32 = record { semigroup = Semigroup-I32-Add; empty = 0 };
Monoid-I64-Add : Monoid I64 = record { semigroup = Semigroup-I64-Add; empty = 0 };
Monoid-F32-Add : Monoid F32 = record { semigroup = Semigroup-F32-Add; empty = 0 };
Monoid-F64-Add : Monoid F64 = record { semigroup = Semigroup-F64-Add; empty = 0 };

Monoid-U8-Mul : Monoid U8 = record { semigroup = Semigroup-U8-Mul; empty = 1 };
Monoid-U16-Mul : Monoid U16 = record { semigroup = Semigroup-U16-Mul; empty = 1 };
Monoid-U32-Mul : Monoid U32 = record { semigroup = Semigroup-U32-Mul; empty = 1 };
Monoid-U64-Mul : Monoid U64 = record { semigroup = Semigroup-U64-Mul; empty = 1 };
Monoid-I8-Mul : Monoid I8 = record { semigroup = Semigroup-I8-Mul; empty = 1 };
Monoid-I16-Mul : Monoid I16 = record { semigroup = Semigroup-I16-Mul; empty = 1 };
Monoid-I32-Mul : Monoid I32 = record { semigroup = Semigroup-I32-Mul; empty = 1 };
Monoid-I64-Mul : Monoid I64 = record { semigroup = Semigroup-I64-Mul; empty = 1 };
Monoid-F32-Mul : Monoid F32 = record { semigroup = Semigroup-F32-Mul; empty = 1 };
Monoid-F64-Mul : Monoid F64 = record { semigroup = Semigroup-F64-Mul; empty = 1 };


||| A monoid that also has an inverse element.
Group (a : Type) = Record {
    ||| The monoid
    monoid : Monoid a;
    ||| The inverse of `monoid.semigroup.append`
    inverse : a -> a;

    -- TODO: Laws via property testing or proofs?
    -- append-left-inverse : (a : Type) -> monoid.semigroup.append (inverse a) a = monoid.empty
};


||| General trait for numeric types
Num (a : Type) = Record {
    ||| The additive monoid
    add : Monoid a;
    ||| The multiplicative monoid
    mul : Monoid a;

    -- TODO: Subtraction?
    -- TODO: Division?
    -- TODO: Lawfulness?
};

add : (a : Type) (N : Num a) -> a -> a -> a;
add a N = append a N.add.semigroup;

zero : (a : Type) (N : Num a) -> a;
zero a N = empty a N.add;

mul : (a : Type) (N : Num a) -> a -> a -> a;
mul a N = append a N.mul.semigroup;

one : (a : Type) (N : Num a) -> a;
one a N = empty a N.mul;


Num-U8-Add : Num U8 = record { add = Monoid-U8-Add; mul = Monoid-U8-Mul };
Num-U16-Add : Num U16 = record { add = Monoid-U16-Add; mul = Monoid-U16-Mul };
Num-U32-Add : Num U32 = record { add = Monoid-U32-Add; mul = Monoid-U32-Mul };
Num-U64-Add : Num U64 = record { add = Monoid-U64-Add; mul = Monoid-U64-Mul };
Num-I8-Add : Num I8 = record { add = Monoid-I8-Add; mul = Monoid-I8-Mul };
Num-I16-Add : Num I16 = record { add = Monoid-I16-Add; mul = Monoid-I16-Mul };
Num-I32-Add : Num I32 = record { add = Monoid-I32-Add; mul = Monoid-I32-Mul };
Num-I64-Add : Num I64 = record { add = Monoid-I64-Add; mul = Monoid-I64-Mul };
Num-F32-Add : Num F32 = record { add = Monoid-F32-Add; mul = Monoid-F32-Mul };
Num-F64-Add : Num F64 = record { add = Monoid-F64-Add; mul = Monoid-F64-Mul };


||| A category is a very general structure that provides a common way of composing
||| units of functionality
|||
||| The most common category programmers would be familiar with would be `Type`s
||| are the objects, and the functions between those types are the arrows. Many
||| other categories exist though, for example:
|||
||| - nodes in a directed graph, and the edges between those nodes.
||| - etc.
Category = Record {
    ||| An object in the category
    Object : Type;
    ||| Arrows between the objects in the category
    Arrow : Object -> Object -> Type;
    ||| The identity arrow
    id : (a : Object) -> Arrow a a;
    ||| The sequencing of two arrows
    seq : (a b c : Object) -> Arrow a b -> Arrow b c -> Arrow a c;

    -- TODO: Laws via property testing or proofs?
    -- TODO: E-Category - ie. equivalence relation on morphisms?
    -- https://gist.github.com/brendanzab/9285eb8dfef5b6d6ccd87d90d6579590#gistcomment-2401643
    -- id-left : (a b : Object) (f : Arrow a b) -> seq id f = f;
    -- id-right : (a b : Object) (f : Arrow a b) -> seq f id = f;
    -- seq-assoc : (a b c d : Object) (f : Arrow a b) (g : Arrow b c) (h : Arrow c d) -> seq (seq f g) h = seq f (seq g h);
    -- seq-cong : (a b c : Object) (f0 f1 : Arrow a b) (g0 g1 : Arrow b c) (p : rel f0 f1) (q : g0 = g1) -> seq f0 g0 = seq f1 g1;
};

-- ||| The identity arrow
-- id : (C : Category) (a : C.Object) -> C.Arrow a a;
-- id C = C.id;

||| The sequencing of two arrows
seq : (C : Category) (a b c : C.Object) -> C.Arrow a b -> C.Arrow b c -> C.Arrow a c;
seq C = C.seq;

-- ||| The composition of two arrows
-- compose : (C : Category) (a b c : C.Object) -> C.Arrow b c -> C.Arrow a b -> C.Arrow a c;
-- compose C a b c f g = seq C a b c g f;


Category-Function : Category^1 = record {
    Object = Type;
    Arrow (a : Type) (b : Type) = a -> b;
    id (a : Type) (x : a) = x;
    seq (a b c : Type) (f : a -> b) (g : b -> c) (x : a) = g (f x);
};


||| Provides a mapping from objects-to-objects and arrows-to-arrows for two
||| categories, `Source` and `Target`
|||
||| Mappings can be anything from applying a function to each element of a
||| collection, to compiling a source language to a target language.
|||
||| Haskell programmers might find this definition a little foreign - this
||| is because we use general categories in the definition, rather than
||| specializing it into the category of Pikelet functions
Functor = Record {
    ||| The source category
    Source : Category;
    ||| The target category
    Target : Category;
    ||| Maps an object in `Source` to an object in `Target`
    Map : Source.Object -> Target.Object;
    ||| Maps an arrow in `Source` into an arrow in `Target`
    map : (a b : Source.Object) -> Source.Arrow a b -> Target.Arrow (Map a) (Map b);

    -- TODO: Laws via property testing or proofs?
};

||| Maps an arrow in `F.Source` into an arrow in `F.Target`
map : (F : Functor) (a b : F.Source.Object) -> F.Source.Arrow a b -> F.Target.Arrow (F.Map a) (F.Map b);
map F = F.map;


Endofunctor-Function : Functor^1 = record {
    Source = Category-Function;
    Target = Category-Function;
    Map x = x;
    map (a b : Type) (f : a -> b) (x : a) = f x;
};
